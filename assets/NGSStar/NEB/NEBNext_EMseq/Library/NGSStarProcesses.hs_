
// this ALWAYS GENERATED file contains the sub-method library header
// Generated at 10/29/2020 5:27:42 PM

#pragma once
#ifndef HSL_RUNTIME
namespace NGSSTARPROCESSES {
function _InitLibrary() { }
function _ExitLibrary() { }
function DATA_CheckPlatesInStacks( device & ML_STAR, sequence & i_seqStack1, sequence & i_seqStack2, sequence & i_seqStack3, sequence & i_seqStack4, variable i_intStack1ExpectedNumberOfPlates, variable i_intStack2ExpectedNumberOfPlates, variable i_intStack3ExpectedNumberOfPlates, variable i_intStack4ExpectedNumberOfPlates, variable & o_intResultCheckOfFalseLoading, variable & o_strMessageResult ) void { }
function DATA_HandoverSequencesAndDataToSMT( sequence & i_seqTip50Filter, sequence & i_seqTip300Filter, sequence & i_seqTip300FilterMPH, sequence & i_seqTip300FilterMPHShiftedTipPickupPosition, sequence & i_seqTip1000Filter, sequence & i_seqCOREGripper, variable i_intTransportTool, variable i_blnSimulationON, variable i_strKitName, variable i_blnDeactivatePipettingStepsForTransportTests ) void { }
function DATA_IncubationTimer( timer & i_strIncubationTimerName, variable i_intTime ) void { }
function DATA_OverdryingProtection( timer & i_strOverdryingTimerName, variable i_intIncubationTimeForTheFollowingStep, variable i_blnStartNewTimer, variable & o_intIncubationTimeForTheFollowingStepModified ) void { }
function DATA_TipCounterRead( device & ML_STAR, variable i_intNumberOfTip50_required, variable i_intNumberOfTip300_required, variable i_intNumberOfTip300MPH_required, variable i_intNumberOfTip1000_required, variable i_intTipTypeToBeProcessed, variable i_blnAlwaysEditTipcounter, variable i_blnShowGUITipAndTimeCalculation ) void { }
function DATA_TipCounterWrite( device & ML_STAR ) void { }
function DATA_UpdateInformationIntoReportFile( variable i_strInformationToUpdateReportList, variable i_blnUpdateInformationIntoReportFile ) void { }
function PIP_BeadsFromTubesOrTroughToPlate( device & ML_STAR, sequence & i_seqAspirationPosition, sequence & i_seqDispensePosition, variable i_fltVolBeads, variable i_strLiquidClassNameTransfer, variable i_strLiquidClassNameMixing, variable i_blnTipExchangeDuringTransfer, sequence seq_Mixing, variable i_blnMixWithSVFT, variable i_blnUpdateInformationIntoReporFile ) void { }
function PIP_BeadsFromTubesOrTroughToPlate_OLD( device & ML_STAR, sequence & i_seqAspirationPosition, sequence & i_seqDispensePosition, variable i_fltVolBeads, variable i_strLiquidClassNameTransfer, variable i_blnTipExchangeDuringTransfer, sequence seq_Mixing, variable i_blnMixWithSVFT, variable i_blnUpdateInformationIntoReporFile ) void { }
function PIP_EtOH_HVFTMultidispenseFromTroughToPlate( device & ML_STAR, sequence & i_seqAspirationPosition, sequence & i_seqDispensePosition, variable i_strLiquidClassNameTransfer, variable & io_fltTrackingEthanolVolume, variable i_blnUpdateInformationIntoReporFile ) void { }
function PIP_IndexAdapters_LVFT_AccordingToInputSequences( device & ML_STAR, sequence & i_seqIndexAdapters, sequence & i_seqAdapterLigationPlate, variable i_strLiquidClassName, variable i_fltVolumeAdapter, variable i_intMixCycles, variable i_fltVolumeMix, variable i_blnUpdateInformationIntoReporFile ) void { }
function PIP_IndexAdapters_LVFT_FromTubesORPlateIntoPlate( device & ML_STAR, sequence & i_seqIndexAdapters, sequence & i_seqAdapterLigationPlate, variable & io_arrIndex1Positions[], variable & io_arrIndex2Positions[], variable & io_arrAdaptorLigationPlatePositions[], variable i_strLiquidClassName, variable i_fltVolumeAdapter, variable i_intMixCycles, variable i_fltVolumeMix, variable i_blnUpdateInformationIntoReporFile ) void { }
function PIP_Liquid_SingleDispenseFromPlateToPlate( device & ML_STAR, sequence & i_seq_AspirationPosition, sequence & i_seq_DispensePosition, variable i_fltVolume, variable i_strLiquidClassNameTransfer, variable i_intMixCycles, variable i_fltVolumeMix, variable i_fltAspirationFixHeight, variable i_fltDispenseFixHeight, variable i_blnTouchOffOnAspirate, variable i_blnLiquidFollowingOnDispense, variable i_blnUpdateInformationIntoReporFile ) void { }
function PIP_Normalize_LVFTForSampleTransferSVFTForBufferTransfer( device & ML_STAR, variable i_strNormalizationFile, sequence & io_seqBuffer, sequence & io_seqSourcePlate, sequence & io_seqDestinationPlate, variable i_strLiquidClassNameTransferBUFFER, variable i_strLiquidClassNameTransferSAMPLE, sequence & io_seqPlateSeqForJustBuffer, sequence & io_seqPoolingPlate, variable i_blnUpdateInformationIntoReporFile ) void { }
function PIP_OIL_LVFTSingleDispenseFromTroughToPlate( device & ML_STAR, sequence & i_seqDestinationHardShellPlate, sequence & i_seqOil, variable i_blnUpdateInformationIntoReporFile ) void { }
function PIP_Pool_LVFT_SingleDispenseFromPlateToPlate( device & ML_STAR, sequence & i_seq_NormPlate, sequence & i_seq_PoolingPlate, variable i_strLiquidClassNameTransfer, variable & i_str_NormalizationFile, variable i_blnUpdateInformationIntoReporFile ) void { }
function PIP_Reagent_SVFT_MPHSingleDispenseFromPlateToPlate( device & ML_STAR, sequence & i_seqAspirationPosition, sequence & i_seqDispensePosition, variable i_fltVolume, variable i_strLiquidClassNameTransfer, variable i_intNumberOfSamples, variable i_fltMixVolumeAfterDispense, variable i_intMixCycles, variable i_blnUpdateInformationIntoReporFile ) void { }
function PIP_ReagentsFromTubeOrTroughOrPlateToPlate( device & ML_STAR, sequence & i_seqAspirationPosition, sequence & i_seqDispensePosition, variable i_fltVolume, variable i_strLiquidClassNameTransfer, variable i_blnTipExchangeDuringTransfer, variable i_intMixCycles, variable i_fltVolumeMix, variable i_fltDispenseHeightFromBottom, variable i_fltAspirateHeightFromBottom, variable i_blnUpdateInformationIntoReporFile ) void { }
function PIP_ReagentsFromTubePlateOrTroughToPlateAccordingToSequencesAndVolumeArray( device & ML_STAR, sequence & i_seqAspirationPosition, sequence & i_seqDispensePosition, variable & i_arrFltVolume[], variable i_strLiquidClassNameTransfer, variable i_blnTipExchangeDuringTransfer, variable i_intMixCycles, variable i_blnUpdateInformationIntoReporFile ) void { }
function PIP_SerialDilutionAccordingToSequencesAndVolumeArray( device & ML_STAR, sequence & i_seqAspirationPosition, sequence & i_seqDispensePosition, variable & i_arrFltVolume[], variable i_strLiquidClassNameTransfer, variable i_blnTipExchangeDuringTransfer, variable i_intMixCycles, variable i_blnUpdateInformationIntoReporFile ) void { }
function PIP_Supernatant_SVFTSingleDispenseFromPlateToLiquidWaste( device & ML_STAR, sequence & i_seqAspirationPosition, sequence & i_seqDispensePosition, variable i_fltVolume, variable i_strLiquidClassNameTransfer, variable i_strLiquidClassNameTransfer2, variable i_blnUpdateInformationIntoReporFile ) void { }
function PIP_Supernatant_SVFT_MPHSingleDispenseFromPlateToWasteMPH( device & ML_STAR, sequence & i_seqAspirationPosition, variable i_fltVolume, variable i_strLiquidClassNameTransfer, variable i_intNumberOfSamples, variable i_blnUpdateInformationIntoReporFile ) void { }
function Process_CleanUp( device & ML_STAR, sequence & i_seqAspirationPositionBeads, sequence & i_seqMixPositionBeads, sequence & i_seqPositionHHS, sequence & i_seqAspirationPositionEthanol, sequence & i_seqMagneticStandPosition, sequence & i_seqLiquidWaste, sequence & i_seqAspirationPositionResuspensionBuffer, variable i_fltVolumeBeads, variable i_fltVolumeEthanol, variable i_fltVolumeResuspensionBuffer, variable i_fltVolumeSupernatantToWaste, variable i_strLiquidClassBeads, variable i_strLiquidClassBeadsMixing, variable i_strLiquidClassEthanol, variable i_strLiquidClassResuspensionBuffer, variable i_strLiquidClassSupernatantToWaste, variable i_strLiquidClassEthanolToWaste, variable i_strLiquidClassEthanol2ndAspirationToWaste, variable i_intShakerRPMBeadSampleMixing, variable i_intShakerRPMResuspendCleanedLibrary, variable i_intShakerDurationBeadSampleMixing, variable i_intShakerDurationResuspendCleanedLibrary, variable i_intNumberOfColumnsWithinOneBatch, variable i_intShakerDevice, variable i_blnActivateBatchProcessForScaleUp, variable i_intTimeForIncubationBeadSampleMixBeforeMagneticSeparation, variable i_intTimeForSeparationAtMagneticStand, variable i_intTimeForAirDryingProcessAtMagneticStand, variable i_intTimeIncubationBeadSampleMixAfterResupendingCleanedLibrary, variable i_intTimeIncubationCleanedLibraryAtMagneticStandAvoidingBeadCarryOver, variable i_blnUpdateInformationIntoReporFile ) void { }
function Process_SizeSelection( device & ML_STAR, sequence & i_seqAspirationPositionBeads, sequence & i_seqMixPositionBeads, variable i_fltVolumeBeadsFirstSeparation, variable i_fltVolumeBeadsSecondSeparation, variable i_strLiquidClassBeads, variable i_strLiquidClassBeadsMixing, sequence & i_seqPositionHHS, variable i_intShakerDevice, variable i_intShakerRPMBeadSampleMixing, variable i_intShakerDurationBeadSampleMixing, variable i_intShakerRPMResuspendCleanedLibrary, variable i_intShakerDurationResuspendCleanedLibrary, sequence & i_seqAspirationPositionEthanol, variable i_strLiquidClassEthanol, variable i_intNumberOfEthanolWashingLoops, sequence & i_seqAspirationPositionResuspensionBuffer, variable i_fltVolumeResuspensionBuffer, variable i_strLiquidClassResuspensionBuffer, sequence & i_seqMagneticStandPosition, variable i_intTimeForSeparationAtMagneticStand, variable i_intTimeForAirDryingProcessAtMagneticStand, variable i_intTimeForIncubationBeadSampleMixBeforeMagneticSeparation, variable i_intTimeIncubationBeadSampleMixAfterResupendingCleanedLibrary, variable i_intTimeIncubationCleanedLibraryAtMagneticStandAvoidingBeadCarryOver, sequence & i_seqLiquidWaste, sequence & i_seqTransferPositionNewMidiPlate, sequence & i_trpPositionMIDIWaste, variable i_strLiquidClassNameTransfer2, variable i_blnUpdateInformationIntoReporFile ) void { }
function Trp_HSP( device & ML_STAR, sequence & i_seqHSPStartingPosition, sequence & i_seqHSP_Destination, variable i_intTrackNumberToReadBarcode, variable i_blnParkTransportToolAfterMove, variable & o_strReadCurrentBarcode, variable i_blnUpdateInformationIntoReporFile ) void { }
function Trp_HSPDownholder( device & ML_STAR, sequence & i_seqDownholderSourcePosition, sequence & i_seqDownholderDestinationPosition, variable i_blnParkTransportToolAfterMove, variable i_blnDownholderSourcePositionIsOnPlate, variable i_blnDownholderDestinationPositionIsOnPlate, variable i_blnUpdateInformationIntoReporFile ) void { }
function Trp_HSPFromAndToODTCwithiSWAP( device & ML_STAR, sequence & i_seqHSPSourcePosition, sequence & i_seqHSPDestinationPosition, variable i_intTrackToReadBarcode, variable i_blnParkTransportToolAfterMove, variable & o_strReadCurrentBarcode, variable i_blnUpdateInformationIntoReporFile ) void { }
function Trp_HamiltonComfortLidWithiSWAP( device & ML_STAR, sequence & i_seqHamiltonComfortLidSourcePosition, sequence & i_seqHamiltonComfortLidDestinationPosition, variable i_blnParkTransportToolAfterMove, variable i_blnUpdateInformationIntoReporFile ) void { }
function Trp_MIDI( device & ML_STAR, sequence & i_seqMIDISourcePosition, sequence & i_seqMIDIDestinationPosition, variable i_intTrackToReadBarcode, variable i_blnParkTransportToolAfterMove, variable & o_strReadCurrentBarcode, variable i_blnUpdateInformationIntoReporFile ) void { }
function Trp_TipsWithMPH( device & ML_STAR, sequence & i_seqTipPickUpPosition, sequence & i_seqTipEjectPosition, variable i_blnCountTipsAtTipPickUpPosition ) void { }
} // namespace
#endif

#ifdef HSL_RUNTIME
#include __filename__ ".hsi"
#endif
// $$author=Hamilton$$valid=0$$time=2020-10-29 17:27$$checksum=08e0d949$$length=085$$