
// this ALWAYS GENERATED file contains the sub-method library header
// Generated at 13/04/2021 15:23:16

#pragma once
#ifndef HSL_RUNTIME
namespace NGSSTARLOADING {
function _InitLibrary() { }
function _ExitLibrary() { }
function Add_LabwareForCurrentProcess( device & ML_STAR, variable i_str_LabwareType, variable i_str_LabwareName, variable i_int_NumberOfUnits, sequence & i_seq_Template, variable i_var_PositionInSequence ) void { }
function Calculate_ReformatSequenceToMatchNumberOfSamples( device & ML_STAR, variable i_int_StartingPoint, sequence i_seq_Template, variable i_int_NumberOfSamples, sequence & o_seqCreated ) void { }
function Calculate_TotalVolumeAndSequenceToAspirate( device & ML_STAR, variable i_str_ReagentName, variable i_int_NumberOfSamples, variable i_str_LabwareTypeId, variable i_flt_MaximumContainerVolume, variable i_flt_DeadVolumeLabware, variable i_flt_DeadVolumeReagent, sequence & i_seq_Template, variable i_int_StartingPoint, variable i_int_MinimumNumberOfContainers, sequence & o_seqCreated_distinctPositions, sequence & o_seqCreated_AdjustedtoNumberOfSamples, variable & o_arr_flt_VolumePerContainer[] ) void { }
function DATA_HandOverDataToSMT_NGSStarLoading( variable i_strFullPathReportFile, variable i_intARWPlatformUsed, variable i_strKitProvider, variable i_strKitName, variable i_blnMPHUsed, variable i_blnLockUnlockSystem, variable i_str_TipCounter50, variable i_str_TipCounter300, variable i_str_TipCounter1000, sequence & i_seq_Tips50, sequence & i_seq_Tips300, sequence & i_seq_Tips1000, variable i_bln_CheckBarcodesInAdditionToTips ) void { }
function Define_VolumePerWell( variable i_str_LiquidName, variable i_flt_VolumePerSample ) variable {  return (0); }
function Define_VolumePerWell_MastermixComponent( variable i_str_MastermixLiquidName, variable i_str_ComponentLiquidName, variable i_flt_VolumePerSample ) variable {  return (0); }
function Display_Error_Dialog( variable i_str_ErrorMessage ) void { }
function Display_InputWorklist_Dialog( variable & o_str_FileWorklistFullPath ) void { }
function Display_Mastermix_Dialog(  ) void { }
function Display_Message_Dialog( variable i_str_Message ) void { }
function Display_SelectEmailAddress_Dialog( variable & o_str_EmailAddress ) void { }
function Display_SelectProcesses_Dialog( variable i_int_MethodSelection, variable & i_arr_strProcessId[], variable & i_arr_strProcessCombinations[], variable & i_arr_intProcessDeactivatedStartPoints[], variable & i_arr_intProcessDeactivatedStopPoints[], variable & o_int_StartProcess, variable & o_int_StopProcess, variable & o_arr_blnProcessActivationStatus[] ) void { }
function Evaluate_ResourcesByCarrier(  ) void { }
function Load_Carrier( device & ML_STAR, variable i_str_CarrierID, variable i_bln_SkipLoadingRoutine, variable i_bln_IsItLoadable, variable i_bln_LoadCarrierOnly_NoDialogs, variable i_str_MainImageName, variable i_str_SubImageName ) variable {  return (0); }
function MMPrep_GetSequencesAndVolumes( variable i_str_ComponentName, sequence & o_seq_AspirateComponents, sequence & o_seq_DispenseComponents, variable & o_arr_fltVolumeComponents[] ) void { }
function MultipleChoiceDialog_DefineChoiceElement( variable i_int_DialogId, variable i_str_GroupName, variable i_str_Label ) void { }
function MultipleChoiceDialog_DisplayDialog( variable i_int_DialogID ) void { }
function MultipleChoiceDialog_RetrieveUserSelection( variable i_int_DialogID, variable i_str_GroupName, variable & o_int_OptionSelected ) void { }
function Read_InputWorklist_ExcelOrCSVFormat( variable i_strSamplePlateFile, sequence i_seqSourceALPTemplate, variable & o_intNumberOfSamples, variable & o_intIndexesUsedSetting, variable & o_arrIndex1SeqPositions[], variable & o_arrIndex1IDs[], variable & o_arrIndex2SeqPositions[], variable & o_arrIndex2IDs[], variable & o_arrALPseqLabID[], variable & o_arrALPseqPositions[], variable & o_strIndexLabwareFormat ) void { }
function Retrieve_50mlTrough_ReagentsVolumesAndSequences( variable & o_arr_ReagentNames[], variable & o_arr_ReagentTotalVolumes[], sequence & o_arr_ReagentSequences[] ) void { }
function _CheckBindReturnValueVectorCustomDialogs( variable i_intBindReturnValue ) void { }
global variable g_int_TotalNumberOf1000Tips;
global variable g_int_TotalNumberOfHSP;
global variable g_bln_ODTCInUse;
global variable g_str_InputWorklistFilePath;
global variable g_int_TotalNumberOfComfortLid;
global variable g_bln_IndexesAreNeeded(0);
global variable g_int_TotalNumberOf300Tips;
global variable g_str_KitProvider;
global variable g_int_TotalNumberOf50Tips;
global variable g_int_TotalNumberOfMIDI;
global variable g_bln_IndexesOnPlate(0);
global variable g_str_KitName;
} // namespace
#endif

#ifdef HSL_RUNTIME
#include __filename__ ".hsi"
#endif
// $$author=Windows10$$valid=0$$time=2021-06-21 17:29$$checksum=82c49c50$$length=086$$