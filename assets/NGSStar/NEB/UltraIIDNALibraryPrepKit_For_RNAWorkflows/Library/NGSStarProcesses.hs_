
// this ALWAYS GENERATED file contains the sub-method library header
// Generated at 2/17/2021 1:32:09 PM

#pragma once
#ifndef HSL_RUNTIME
namespace NGSSTARPROCESSES {
function _InitLibrary() { }
function _ExitLibrary() { }
function DATA_CheckPlatesInStacks( device & ML_STAR, sequence & i_seqStack1, sequence & i_seqStack2, sequence & i_seqStack3, sequence & i_seqStack4, variable i_intStack1ExpectedNumberOfPlates, variable i_intStack2ExpectedNumberOfPlates, variable i_intStack3ExpectedNumberOfPlates, variable i_intStack4ExpectedNumberOfPlates, variable & o_intResultCheckOfFalseLoading, variable & o_strMessageResult ) void { }
function DATA_CheckPlatesInStacks_TeachingNeedles( device & ML_STAR, sequence & io_seqStack1, sequence & io_seqStack2, sequence & io_seqStack3, sequence & io_seqStack4, variable i_intStack1ExpectedNumberOfPlates, variable i_intStack2ExpectedNumberOfPlates, variable i_intStack3ExpectedNumberOfPlates, variable i_intStack4ExpectedNumberOfPlates, variable i_fltStack1OffsetOfContainerRim, variable i_fltStack2OffsetOfContainerRim, variable i_fltStack3OffsetOfContainerRim, variable i_fltStack4OffsetOfContainerRim, variable & o_intResultCheckOfFalseLoading, variable & o_strMessageResult ) void { }
function DATA_CreateNewSequencesOrTransportSequences( sequence i_sequenceTemplate, variable & i_arrPositionIDs[], sequence & o_seqCreated, variable i_intSequenceType ) void { }
function DATA_HandoverSequencesAndDataToSMT( device & ML_STAR, variable i_intTransportTool, variable i_strKitProvider, variable i_strKitName, variable i_blnDeactivatePipettingStepsForTransportTests, variable i_blnReduceChannelpatternFrom8To4, variable i_strEmailAdress, variable i_blnLockUnlockSystem, variable & o_strFullPathReportFile, sequence & o_arrTipAdapters[], variable i_blnUseMPH ) void { }
function DATA_IncubationTimer( timer & i_strIncubationTimerName, variable i_intTime, variable i_intTimerMode ) void { }
function DATA_SendEmail( variable i_strSubject, variable i_strMessage ) void { }
function DATA_ShowArrayProperties( variable & i_arrayToBeAnalyzed[], variable i_intPresentationMode ) void { }
function DATA_ShowSequenceProperties( sequence & i_seqCheckSequence, variable i_intPresentationMode ) void { }
function DATA_ShowVariableProperties( variable i_strVariableName, variable i_varVariable, variable i_intPresentationMode ) void { }
function DATA_TipCounterRead( device & ML_STAR, variable i_intNumberOfTip50_required, variable i_intNumberOfTip300_required, variable i_intNumberOfTip1000_required, variable i_intTipTypeToBeProcessed, variable i_blnAlwaysEditTipcounter, variable i_blnShowGUITipAndTimeCalculation ) void { }
function DATA_TipCounterWrite( device & ML_STAR ) void { }
function DATA_UpdateInformationIntoReportFile( variable i_strInformationToUpdateReportList, variable i_blnUpdateInformationToStatusWindow ) void { }
function PIP_CheckForSufficientVolumeIn50mlTroughs( device & ML_STAR, variable & i_arr_strReagentNames[], variable & i_arr_fltReagentVolumes[], sequence & i_arr_seqAspirateReagents[], variable & o_bln_RefillContainers ) void { }
function PIP_CleanUpTipAdapter( device & ML_STAR, variable i_blnStoreTipsToOriginalSequence ) void { }
function PIP_DefragmentTipRacks( device & ML_STAR ) void { }
function PIP_MPH_ReagentsfromPlatetoPlate( device & ML_STAR, sequence & i_seqAspirationPosition, sequence & i_seqDispensePosition, variable i_fltVolume, variable i_strLiquidClassNameTransfer, variable i_intNumberOfSamples, variable i_intMixCycles, variable i_fltVolumeMixAspiration, variable i_fltVolumeMixDispense, variable i_fltAspirateHeightFromBottom, variable i_fltDispenseHeightFromBottom ) void { }
function PIP_MPH_Supernatant_SVFT_SingleDispenseFromPlateToWaste( device & ML_STAR, sequence & i_seqAspirationPosition, variable i_fltVolume, variable i_strLiquidClassNameTransfer, variable i_intNumberOfSamples ) void { }
function PIP_MixOnly( device & ML_STAR, sequence i_seqAspirationPosition, variable i_fltAspirateHeightFromBottom, variable i_strLiquidClassNameTransfer, variable i_intMixCycles, variable i_fltMixingVolume ) void { }
function PIP_ReagentsFromTubeOrTroughOrPlataToPlate_pLLD( device & ML_STAR, sequence & i_seqAspirationPosition, sequence & i_seqDispensePosition, variable i_fltVolume, variable i_strLiquidClassNameTransfer, variable i_intMixCycles, variable i_fltVolumeMixAspiration, variable i_fltVolumeMixDispense, variable i_fltDispenseHeightFromBottom, variable i_blnIncrementAspirationSequence ) void { }
function PIP_ReagentsFromTubeOrTroughOrPlateToPlate( device & ML_STAR, sequence & i_seqAspirationPosition, sequence & i_seqDispensePosition, variable i_fltVolume, variable i_strLiquidClassNameTransfer, variable i_intMixCycles, variable i_fltVolumeMixAspiration, variable i_fltVolumeMixDispense, variable i_fltAspirateHeightFromBottom, variable i_fltDispenseHeightFromBottom, variable i_blnTipExchangeDuringTransfer, variable i_blnIncrementAspirationSequence ) void { }
function PIP_ReagentsFromTubeOrTroughOrPlateToPlateWithVolumeArray( device & ML_STAR, sequence & i_seqAspirationPosition, sequence & i_seqDispensePosition, variable & i_arrFltVolume[], variable i_strLiquidClassNameTransfer, variable i_intMixCycles, variable i_fltAspirateHeightFromBottom, variable i_fltDispenseHeightFromBottom, variable i_blnTipExchangeDuringTransfer, variable i_blnIncrementAspirationSequence ) void { }
function PIP_Supernatant_SVFTSingleDispenseFromPlateToLiquidWaste( device & ML_STAR, sequence & i_seqAspirationPosition, sequence & i_seqDispensePosition, variable i_fltVolume, variable i_strLiquidClassNameTransfer ) void { }
function Process_CleanUp( device & ML_STAR, sequence & i_seqAspirationPositionBeads, sequence & i_seqMixPositionBeads, sequence & i_seqPositionHHS, sequence & i_seqAspirationPositionEthanol, sequence & i_seqMagneticStandPosition, sequence & i_seqLiquidWaste, sequence & i_seqAspirationPositionResuspensionBuffer, variable i_fltVolumeEthanol, variable i_fltVolumeBeads, variable i_fltVolumeResuspensionBuffer, variable i_fltVolumeSupernatantToWaste, variable i_strLiquidClassBeads, variable i_strLiquidClassBeadsMixing, variable i_strLiquidClassEthanol, variable i_strLiquidClassResuspensionBuffer, variable i_strLiquidClassSupernatantToWaste, variable i_strLiquidClassEthanolToWaste, variable i_intShakerRPMBeadSampleMixing, variable i_intShakerRPMResuspendCleanedLibrary, variable i_intShakerDurationBeadSampleMixing, variable i_intShakerDurationResuspendCleanedLibrary, variable i_intNumberOfColumnsWithinOneBatch, variable i_intShakerDevice, variable i_blnActivateBatchProcessForScaleUp, variable i_intTimeForIncubationBeadSampleMixBeforeMagneticSeparation, variable i_intTimeForSeparationAtMagneticStand, variable i_intTimeForAirDryingProcessAtMagneticStand, variable i_intTimeIncubationBeadSampleMixAfterResupendingCleanedLibrary, variable i_intTimeIncubationCleanedLibraryAtMagneticStandAvoidingBeadCarryOver ) void { }
function Process_CleanUp_MPH( device & ML_STAR, sequence & i_seqAspirationPositionBeads, sequence & i_seqMixPositionBeads, sequence & i_seqPositionHHS, sequence & i_seqAspirationPositionEthanol, sequence & i_seqMagneticStandPosition, sequence & i_seqLiquidWaste, sequence & i_seqAspirationPositionResuspensionBuffer, variable i_fltVolumeEthanol, variable i_fltVolumeBeads, variable i_fltVolumeResuspensionBuffer, variable i_fltVolumeSupernatantToWaste, variable i_strLiquidClassBeads, variable i_strLiquidClassBeadsMixing, variable i_strLiquidClassEthanol, variable i_strLiquidClassResuspensionBuffer, variable i_strLiquidClassSupernatantToWasteMPH, variable i_strLiquidClassEthanolToWasteMPH, variable i_intShakerRPMBeadSampleMixing, variable i_intShakerRPMResuspendCleanedLibrary, variable i_intShakerDurationBeadSampleMixing, variable i_intShakerDurationResuspendCleanedLibrary, variable i_intShakerDevice, variable i_intTimeForIncubationBeadSampleMixBeforeMagneticSeparation, variable i_intTimeForSeparationAtMagneticStand, variable i_intTimeForAirDryingProcessAtMagneticStand, variable i_intTimeIncubationBeadSampleMixAfterResupendingCleanedLibrary, variable i_intTimeIncubationCleanedLibraryAtMagneticStandAvoidingBeadCarryOver, variable i_intInputNumberOfSamples ) void { }
function Process_SizeSelection( device & ML_STAR, sequence & i_seqAspirationPositionBeads, sequence & i_seqMixPositionBeads, sequence & i_seqLiquidWaste, sequence & i_seqPositionHHS, sequence & i_seqTransferPositionNewMidiPlate, sequence & i_seqAspirationPositionEthanol, sequence & i_seqAspirationPositionResuspensionBuffer, sequence & i_seqMagneticStandPosition, sequence & i_trpPositionMIDIWaste, variable i_strLiquidClassResuspensionBuffer, variable i_strLiquidClassEthanol, variable i_strLiquidClassBeads, variable i_strLiquidClassBeadsMixing, variable i_fltVolumeTransferSupernatantDuringSizeSelection, variable i_fltVolumeEthanol, variable i_fltVolumeBeadsFirstSeparation, variable i_fltVolumeBeadsSecondSeparation, variable i_fltVolumeResuspensionBuffer, variable i_intShakerDevice, variable i_intShakerRPMBeadSampleMixing, variable i_intShakerDurationBeadSampleMixing, variable i_intShakerRPMResuspendCleanedLibrary, variable i_intShakerDurationResuspendCleanedLibrary, variable i_blnActivateBatchProcessForScaleUp, variable i_intNumberOfColumnsWithinOneBatch, variable i_intTimeForSeparationAtMagneticStand, variable i_intTimeForAirDryingProcessAtMagneticStand, variable i_intTimeForIncubationBeadSampleMixBeforeMagneticSeparation, variable i_intTimeIncubationBeadSampleMixAfterResupendingCleanedLibrary, variable i_intTimeIncubationCleanedLibraryAtMagneticStandAvoidingBeadCarryOver ) void { }
function Process_SizeSelection_MPH( device & ML_STAR, sequence & i_seqAspirationPositionBeads, sequence & i_seqMixPositionBeads, sequence & i_seqLiquidWaste, sequence & i_seqPositionHHS, sequence & i_seqTransferPositionNewMidiPlate, sequence & i_seqAspirationPositionEthanol, sequence & i_seqAspirationPositionResuspensionBuffer, sequence & i_seqMagneticStandPosition, sequence & i_trpPositionMIDIWaste, variable i_strLiquidClassSupernatantToWasteMPH, variable i_strLiquidClassResuspensionBuffer, variable i_strLiquidClassEthanol, variable i_strLiquidClassBeads, variable i_strLiquidClassBeadsMPH, variable i_strLiquidClassBeadsMixing, variable i_fltVolumeTransferSupernatantDuringSizeSelection, variable i_fltVolumeEthanol, variable i_fltVolumeBeadsFirstSeparation, variable i_fltVolumeBeadsSecondSeparation, variable i_fltVolumeResuspensionBuffer, variable i_intShakerDevice, variable i_intShakerRPMBeadSampleMixing, variable i_intShakerDurationBeadSampleMixing, variable i_intShakerRPMResuspendCleanedLibrary, variable i_intShakerDurationResuspendCleanedLibrary, variable i_intTimeForSeparationAtMagneticStand, variable i_intTimeForAirDryingProcessAtMagneticStand, variable i_intTimeForIncubationBeadSampleMixBeforeMagneticSeparation, variable i_intTimeIncubationBeadSampleMixAfterResupendingCleanedLibrary, variable i_intTimeIncubationCleanedLibraryAtMagneticStandAvoidingBeadCarryOver, variable i_intInputNumberOfSamples ) void { }
function Trp_HSP( device & ML_STAR, sequence & i_seqHSPStartingPosition, sequence & i_seqHSP_Destination, variable i_intTrackNumberToReadBarcode, variable i_blnParkTransportToolAfterMove, variable & o_strReadCurrentBarcode, variable i_intGripModeISWAP ) void { }
function Trp_HSPDownholder( device & ML_STAR, sequence & i_seqDownholderSourcePosition, sequence & i_seqDownholderDestinationPosition, variable i_blnParkTransportToolAfterMove, variable i_blnDownholderSourcePositionIsOnPlate, variable i_blnDownholderDestinationPositionIsOnPlate ) void { }
function Trp_HSPFromAndToODTCwithiSWAP( device & ML_STAR, sequence & i_seqHSPSourcePosition, sequence & i_seqHSPDestinationPosition, variable i_intTrackToReadBarcode, variable i_blnParkTransportToolAfterMove, variable & o_strReadCurrentBarcode ) void { }
function Trp_HamiltonComfortLid( device & ML_STAR, sequence & i_seqHamiltonComfortLidSourcePosition, sequence & i_seqHamiltonComfortLidDestinationPosition, variable i_blnParkTransportToolAfterMove, variable i_blnDestinationPositionReachableWithCOREGripper ) void { }
function Trp_HamiltonComfortLid_TEST( device & ML_STAR, sequence & i_seqHamiltonComfortLidSourcePosition, sequence & i_seqHamiltonComfortLidDestinationPosition, variable i_blnParkTransportToolAfterMove, variable i_blnDestinationPositionReachableWithCOREGripper ) void { }
function Trp_MIDI( device & ML_STAR, sequence & i_seqMIDISourcePosition, sequence & i_seqMIDIDestinationPosition, variable i_intTrackToReadBarcode, variable i_blnParkTransportToolAfterMove, variable & o_strReadCurrentBarcode, variable i_intGripModeISWAP ) void { }
function _DATA_TranslateAutoLoadErrorCodes( variable i_intMainError, variable i_intSlaveError, variable i_intErrorRecovery, variable & o_strTranslatedAutoLoadInformaton ) void { }
function _DATA_TranslateChannelErrorCodes( variable i_intChannelPerformedTransportOrPipetteStep, variable i_intMainError, variable i_intSlaveError, variable i_intErrorRecovery, variable & o_strTranslatedPipettingInformaton ) void { }
function _DATA_TranslateMultiProbeHead96ErrorCodes( variable i_intMainError, variable i_intSlaveError, variable i_intErrorRecovery, variable & o_strTranslatedPipettingInformaton ) void { }
function _DATA_TranslateiSWAPErrorCodes( variable i_intMainError, variable i_intSlaveError, variable i_intErrorRecovery, variable & o_strTranslatedTransportInformaton ) void { }
function _EjectTips( device & ML_STAR, sequence i_seqTipEject ) void { }
global variable g_strFullPathReportFile;
} // namespace
#endif

#ifdef HSL_RUNTIME
#include __filename__ ".hsi"
#endif
// $$author=Windows10$$valid=0$$time=2021-06-21 17:29$$checksum=39413aa0$$length=086$$