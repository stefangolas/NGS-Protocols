
// this ALWAYS GENERATED file contains the sub-method library header
// Generated at 21.01.2020 14:00:22

#pragma once
#ifndef HSL_RUNTIME
namespace SEQUENCECONTROLLER {
function _InitLibrary() { }
function _ExitLibrary() { }
function CreateBeadsSequence( sequence i_seqBufferTubes, variable i_intSampleNumber, sequence & o_seqAspirationBuffer ) void { }
function CreateBufferSequence( sequence i_seqBufferTubes, variable i_intTubeNumber, variable i_intSampleNumber, sequence & o_seqAspirationBuffer ) void { }
function CreateDaughterSequence( sequence i_seqMother, variable i_strLabwareID, variable i_intBlockOf24, sequence & o_seqDaughter ) void { }
function CreateDaughterSequence16( sequence i_seqMother, variable i_strLabwareID, variable i_intBlockOf16, sequence & o_seqDaughter ) void { }
function CreateDaughterSequence48( sequence i_seqMother, variable i_strLabwareID, variable i_intBlockOf48, sequence & o_seqDaughter ) void { }
function CreateDoubleBufferSequence( sequence i_seqBufferTubes, variable i_intTubeNumber, variable i_intSampleNumber, sequence & o_seqAspirationBuffer ) void { }
function CreateSampleSequence( variable & i_arrSamplePositions[], sequence & o_seqSamplesEpp ) void { }
function CreateSequenceFromArray( variable i_strLabwareID, variable & i_arrPositions[], sequence & o_seq ) void { }
function CreateSequenceFromSequence( sequence i_seqInput, variable i_strLabwareID, sequence & o_seq ) void { }
function CreateSequenceNumFromSequenceAlfanum( sequence i_seqInput, variable i_strLabwareID, sequence & o_seq ) void { }
function MergeTwoSequences( sequence i_seqFirst, sequence i_seqSecond, sequence & o_seqOut ) void { }
} // namespace
#endif

#ifdef HSL_RUNTIME
#include __filename__ ".hsi"
#endif
// $$author=Windows10$$valid=0$$time=2021-06-30 15:19$$checksum=de7527c8$$length=086$$