
// this ALWAYS GENERATED file contains the sub-method library header
// Generated at 10/15/2024 8:48:03 AM

#pragma once
#ifndef HSL_RUNTIME
namespace HAMILTONHEATERSHAKER_CONTROLLER {
function _InitLibrary() { }
function _ExitLibrary() { }
function HHS_CheckTemperature( variable i_intNumberOfConnectedHHS, variable & o_fltTemperature ) variable {  return (0); }
function HHS_GetRecordedTemperatureData( variable i_intNumberOfConnectedHHS, variable & o_arrFltRecordedTemperaturData[] ) variable {  return (0); }
function HHS_Lock( variable i_intNumberOfConnectedHHS, variable i_blnLock ) variable {  return (0); }
function HHS_SetTemperature( variable i_intNumberOfConnectedHHS, variable i_fltTemperature, variable i_blnWaitForTempReached, variable i_blnActivateTemperatureRecording ) variable {  return (0); }
function HHS_SetTemperatureAdvanced( variable i_intNumberOfConnectedHHS, variable i_fltTemperature, variable i_blnWaitForTempReached, variable i_blnActivateTemperatureRecording ) variable {  return (0); }
function HHS_Shake( variable i_intNumberOfConnectedHHS, variable i_intShakingDirection, variable i_intShakingAcceleration, variable i_intShakingSpeed, variable i_intShakingTime ) variable {  return (0); }
function HHS_StopInfinitShaking( variable i_intNumberOfConnectedHHS ) variable {  return (0); }
function HHS_Terminate(  ) variable {  return (0); }
function Init( variable i_blnSimulationModeON, device & ML_STAR, variable i_intConnectionType, variable i_intNumberOfHHS, variable i_intNumberOfControllerBoxes, variable i_ActivateIntegratedAbortHandler, variable & o_arrIntHHSNumbers[], variable & o_strNameAndVersion ) variable {  return (0); }
} // namespace
#endif

#ifdef HSL_RUNTIME
#include __filename__ ".hsi"
#endif
// $$author=orr_b$$valid=0$$time=2024-10-15 08:48$$checksum=c324f011$$length=082$$