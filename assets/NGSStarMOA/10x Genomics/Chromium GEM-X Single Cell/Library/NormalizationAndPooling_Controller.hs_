
// this ALWAYS GENERATED file contains the sub-method library header
// Generated at 28/03/2024 12:47:23

#pragma once
#ifndef HSL_RUNTIME
namespace NORMALIZATIONANDPOOLING_CONTROLLER {
function _InitLibrary() { }
function _ExitLibrary() { }
function FilterSequenceAndArrayForTipType( sequence i_seq_Tips, sequence i_seq_Source, sequence i_seq_Target, variable & i_arr_flt_Volumes[], sequence & o_seq_Aspirate, sequence & o_seq_Dispense, variable & o_arr_flt_Volumes[], device & ML_STAR ) void { }
function Init( device & ML_STAR, variable i_strKitTitle, variable i_blnActivateIntegratedAbortHandler, variable & o_strControllerNameAndVersion ) variable {  return (0); }
function Normalization_ByConcentration( variable i_str_WorklistFilePath, sequence i_seq_SourceSamplePlate, sequence i_seq_NormalizationPlate, variable i_flt_MaximumVolumePerContainer, variable i_bln_AllowCostumerIntervention, variable & o_int_NumberOfSamples, sequence & o_seq_Asp_Samples, sequence & o_seq_Disp_Samples, variable & o_arr_flt_Volumes_Sample[], sequence & o_seq_Disp_Diluent, variable & o_arr_flt_Volumes_Diluent[], variable & o_str_FilePath_OutputFile, variable & o_flt_Diluent_TotalVolume, device & ML_STAR ) variable {  return (0); }
function Pooling_ByMass( variable i_str_WorklistFilePath, sequence i_seq_SourceSamplePlate, sequence i_seq_Pooling, variable i_flt_MaximumVolumePerContainer, variable i_bln_AllowCostumerIntervention, sequence & o_seq_Asp_Samples, sequence & o_seq_Disp_Samples, variable & o_arr_flt_Volumes_Sample[], sequence & o_seq_Disp_Diluent, variable & o_arr_flt_Volumes_Diluent[], variable & o_flt_Diluent_TotalVolume, variable & o_str_FilePath_OutputFile, variable & o_int_NumberOfPools, variable & o_arr_flt_Volumes_Pools[], variable & o_arr_str_PostionIDsPools[], device & ML_STAR ) variable {  return (0); }
function Pooling_ByVolume( variable i_str_WorklistFilePath, sequence i_seq_SourceSamplePlate, sequence i_seq_Pooling, variable i_flt_MaximumVolumePerContainer, variable i_bln_AllowCostumerIntervention, sequence & o_seq_Asp_Samples, sequence & o_seq_Disp_Samples, variable & o_arr_flt_Volumes_Sample[], variable & o_int_NumberOfPools, variable & o_arr_str_PostionIDsPools[], variable & o_arr_flt_Volumes_Pools[], variable & o_str_FilePath_OutputFile, device & ML_STAR ) variable {  return (0); }
} // namespace
#endif

#ifdef HSL_RUNTIME
#include __filename__ ".hsi"
#endif
// $$author=orr_b$$valid=0$$time=2024-10-04 07:18$$checksum=88899428$$length=082$$