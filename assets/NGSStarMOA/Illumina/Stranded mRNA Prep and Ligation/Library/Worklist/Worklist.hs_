
// this ALWAYS GENERATED file contains the sub-method library header
// Generated at 3/29/2021 1:59:49 AM

#pragma once
#ifndef HSL_RUNTIME
namespace WORKLIST {
function _InitLibrary() { }
function _ExitLibrary() { }
function A_WorkList_Read( device & i_MLSTAR, variable i_hdl_InputWorklist, variable i_bln_SetConcentrationFilterOnWorklist, variable i_flt_MinimumConcentration, variable i_flt_MaximumConcentration, sequence i_seq_SourcePlate, sequence & o_seq_SourceAsp, sequence i_seq_TargetPlate, sequence & o_seq_TargetDisp, variable & o_int_NumberOfSamplesFromFile, variable & o_int_NumberOfTargetsFromFile, variable & o_arr_SourceWellPositions[], variable & o_arr_TargetWellPositionsDistinct[] ) void { }
function B_IntermediateNormalisation( device & i_ML_STAR, variable i_hdl_InputWorklist, variable i_flt_SourceVolume, variable i_flt_IntermediateVolume, variable i_flt_DestinationVolume, variable i_flt_DestinationYield, sequence i_seq_IntermediateLabware, sequence & o_seq_IntermediateDispSequence, variable & i_arr_SourceWellID[], variable & o_arr_IntermediateWellIDs[], variable & o_arr_VolumesSourceToIntermediate[], variable & o_arr_VolumesDiluentToIntermediate[] ) void { }
function B_NormaliseOnPooling( device & i_MLSTAR, variable i_hdl_InputWorklist, variable i_flt_TargetVolume, variable i_flt_TargetYield, variable & i_arr_SourceWellID[], variable & i_arr_TargetWellID[], variable & o_arr_VolumeSourceArray[], variable & o_arr_VolumeDiluentArray[], variable & o_arr_TargetWellIDs[] ) void { }
function C_Adapter1( device & i_MLSTAR, variable i_hdl_InputWorklist, variable & i_arr_SourceWellID[], sequence i_seq_AdapterTubesOrPlate, sequence i_seq_AdapterDestPlate, sequence & o_seq_AdapterAsp, sequence & o_seq_AdapterDisp, variable & o_arr_AdapterDistinct[], variable & o_arr_AdapterFrequency[], variable i_bln_UsingMPH, variable & o_str_PlateBacodeUDP ) void { }
function C_Adapter2( device & i_MLSTAR, variable i_hdl_InputWorklist, variable & i_arr_SourceWellID[], sequence i_seq_Adapter1TubesOrPlate, sequence i_seq_Adapter2TubesOrPlate, sequence i_seq_AdapterDestPlate, sequence & o_seq_Adapter1Asp, sequence & o_seq_Adapter2Asp, sequence & o_seq_AdapterDisp, variable & o_arr_Adapter1Distinct[], variable & o_arr_Adapter2Distinct[], variable & o_arr_Adapter1Frequency[], variable & o_arr_Adapter2Frequency[] ) void { }
function C_SamplePrep( device & i_MLSTAR, variable i_hdl_InputWorklist, variable & i_arr_SourceWellID[], variable i_bln_FilterSampleType, variable i_str_SampleType, variable i_str_SamplePrep, sequence i_seq_SourceWells, sequence i_seq_TargetWells, sequence & o_seq_SourceWells_SamplePrep, sequence & o_seq_TargetWell_SamplePrep, variable & o_arr_TargetArray_SamplePrep[], variable & o_arr_SourceArray_SamplePrep[], variable & o_int_NumberOfSampleTypeSamples, variable & o_int_NumberOfSamplePrepSamples ) void { }
function C_SampleType( device & i_MLSTAR, variable i_hdl_InputWorklist, variable & i_arr_SourceWellID[], variable i_str_SampleType, sequence i_seq_SourceWells, sequence i_seq_TargetWells, sequence & o_seq_SourceWells_SampleType, sequence & o_seq_TargetWell_SampleType, variable & o_arr_TargetArray_SampleType[], variable & o_arr_SourceArray_SampleType[], variable & o_int_NumberOfSampleTypeSamples ) void { }
function C_UMI_Plate( device & i_MLSTAR, variable i_hdl_InputWorklist, variable & i_arr_SourceWellID[], sequence i_seq_AdapterTubesOrPlate, sequence i_seq_AdapterDestPlate, sequence & o_seq_AdapterAsp, sequence & o_seq_AdapterDisp, variable & o_arr_AdapterDistinct[], variable & o_arr_AdapterFrequency[], variable i_bln_UsingMPH ) void { }
function D_FixedVolumePoolingCalc( variable i_flt_VolumePerSample, variable & o_arr_fltVolumeOfPools[] ) void { }
function D_PoolingArrays( variable & o_arr_intNumberOfSamplesPerPool[], variable & o_int_NumberOfPools ) void { }
} // namespace
#endif

#ifdef HSL_RUNTIME
#include __filename__ ".hsi"
#endif
// $$author=Orr_B$$valid=0$$time=2022-08-02 15:42$$checksum=10bfc9c4$$length=082$$